{
	"info": {
		"_postman_id": "1769fd85-2854-4d2e-be9c-5fc592a69e74",
		"name": "eCourseSlimApi_testdata",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "33a5911d-f02a-43fe-af02-8fdd11332079",
			"name": "get test course Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name1",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test1@test.ch",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/testcourse",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"testcourse"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "efc4ded3-923f-4f05-a9a8-e6377e683ef7",
			"name": "create user Donald",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46968642-fefb-40ff-acea-f160310117ba",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userIdDonald\",jsonData.userId)",
							"    ",
							"})",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Donald_The_Duck",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "donald@duck.eh",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "password",
							"value": "quack",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "0f91826e-d4b9-4e3c-8f10-69d1a853020f",
			"name": "create user Daisy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8487db9e-d08a-4a68-ae72-866ae723bb98",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userIdDaisy\",jsonData.userId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Daisy Duck",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "daisy@duck.eh",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "password",
							"value": "quack",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "d4e85ddb-45ea-47dc-a665-664c777a0bc7",
			"name": "create user Dagobert",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a74b733-c203-4bb5-a0c5-1fa81e26a7ea",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userIdDagobert\",jsonData.userId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Dagobert Duck",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "Dagobert@duck.eh",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "password",
							"value": "quack",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "7b7a1f02-41b1-4e95-82be-41452bd9b774",
			"name": "create user Papa Schlumpf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fcce814-e52a-4268-bea8-72664a6f00b6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userIdPapaSchlumpf\",jsonData.userId)",
							"    ",
							"})",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Papa",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "papa@schlumpf.be",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "password",
							"value": "rot",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "29d3604d-11f1-4003-8e6e-829cf499ed43",
			"name": "add course Sommerlager",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "479048f4-f158-4e1c-80b8-663fae6273c4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set courseId1 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"courseId1\",jsonData.courseId)",
							"    ",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userIdDonald}}",
							"sessionValue": "{{userId1}}",
							"type": "text"
						},
						{
							"key": "courseName",
							"value": "Sommerlager",
							"sessionValue": "test course1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/course",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "79546be2-2ba0-4c69-8574-b89938bc5f27",
			"name": "create leader Donald",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "867c03ac-dbe8-431b-9ddc-49609d97db74",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderIdDonald\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userIdDonald}}",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "Donald",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "Duck",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "quäck",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "a6a785e1-9169-4f05-9844-f2921653e0ff",
			"name": "create leader Daisy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a194a356-000c-4588-9219-c97ce9757981",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderIdDaisy\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userIdDaisy}}",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "Daisy",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "Duck",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "quäck",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "0a6803a2-a032-44a0-8ae4-73b18dcd309c",
			"name": "create leader Dagobert",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "576268c3-4b41-4387-b8fe-7387a5d538f3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderIdDagobert\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userIdDagobert}}",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "Dagobert",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "Duck",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "blingbling",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "a52d5069-c066-4aef-984f-10dfeb992ca9",
			"name": "create leader Papa Schlumpf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "197d806c-65da-442c-8e04-8331d909322b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderIdPapaSchlumpf\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userIdPapaSchlumpf}}",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "Papa",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "Schlumpf",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "Grote Smurf",
							"sessionValue": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "d7a5d159-da77-4f6c-9f36-68f02f232778",
			"name": "create participant Tick",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1c4efe8-3dbf-4cc9-aecb-5e36f96523ce",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdTick\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Tick",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Duck",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Huey",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "22ad08d2-a217-477e-96b7-128645185c61",
			"name": "create participant Trick",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ded45f8-5fcc-495f-9ca4-7fdb84f68905",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdTrick\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Trick",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Duck",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Dewey",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "dfbf347b-c88c-437b-a9fd-fbe23c782032",
			"name": "create participant Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35b2b544-99d6-4597-a27d-e881f4790c3b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdTrack\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Track",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Duck",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Louie",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "f8c22151-0e23-4250-b2c9-c61ffe07385b",
			"name": "create participant BabySmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b500ab34-cf22-475b-bc90-5fc7c58840e3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdBabysmurf\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Baby",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Schlumpf",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Babysmurf",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "95b023a3-f3b1-4618-a69b-44445dcd11d0",
			"name": "create participant SmulSmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "708183c4-a44f-4832-80b3-4bdd2e111dbb",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdSmulsmurf\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Smul",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Schlumpf",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Smulsmurf",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "110b4f37-a24b-424a-95c8-8d75da49087c",
			"name": "create participant Brilsmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1a837f5-76e1-49ab-abf8-7d76699e4774",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdBrilmurf\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Brillen",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Schlumpf",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Brilsmurf",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "86d0549c-11cb-4fed-9225-b8c59e8a00a2",
			"name": "create participant Boerensmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e89617e-3cef-4c2b-a42b-7d1359250c5f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdBoerensmurf\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Bauer",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Schlumpf",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Boerensmurf",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "c1d0c184-7388-4567-bf58-603489751954",
			"name": "create participant Muzieksmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fcdfa09e-7434-400a-80a6-03c10944a135",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantIdMuzieksmurf\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "participantName",
							"value": "Musik",
							"sessionValue": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "Schlumpf",
							"sessionValue": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "Muzieksmurf",
							"sessionValue": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "7fb39252-3404-42e4-9e43-0d851d3316db",
			"name": "create activity swimming",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f90b2dec-fbc1-4151-94bb-a4815fa9775a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set activityId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"activityIdSwimming\",jsonData.activityId)",
							"    ",
							"})",
							"",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "swimming",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "activityNumber",
							"value": "1",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "4511af12-7e30-4364-b450-2ec0367ab40c",
			"name": "create activity hiking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d607a70-1940-467e-87ba-e00d513cffa1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set activityId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"activityIdHiking\",jsonData.activityId)",
							"    ",
							"})",
							"",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "hiking",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "activityNumber",
							"value": "2",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "4dda059c-fb49-4174-ad2a-3885606a9db8",
			"name": "create activity running",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e296533-a9ae-4f1d-b020-d532b8029795",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set activityId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"activityIdRunning\",jsonData.activityId)",
							"    ",
							"})",
							"",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "running",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "activityNumber",
							"value": "3.12",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "ae7f5439-cef0-41b3-a5e2-f20bf27a947c",
			"name": "create activity schlumpfen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8541645b-a898-4fe2-9744-9fab8eacf748",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set activityId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"activityIdSchlumpfen\",jsonData.activityId)",
							"    ",
							"})",
							"",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "schlumpfen",
							"sessionValue": "testmyc",
							"type": "text"
						},
						{
							"key": "activityNumber",
							"value": "3.15",
							"sessionValue": "0",
							"type": "text"
						},
						{
							"key": "activityDate",
							"value": "2018-01-02 03:04:05",
							"sessionValue": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "544aff0c-0929-4b91-b0c7-43fdfd6a1620",
			"name": "create participantTag green",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6fb88898-313b-417c-9cab-98ff301a52d8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantTagIdGreen\",jsonData.participantTagId)",
							"    ",
							"})",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantTagName",
							"value": "Troop Green",
							"sessionValue": "testname",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participantTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "b67a22ef-8563-4a1c-9a8a-d6b68575e364",
			"name": "create participantTag blue",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "328ddae4-5915-4544-8dfd-4cf6136a7228",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantTagIdBlue\",jsonData.participantTagId)",
							"    ",
							"})",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantTagName",
							"value": "Troop Blue",
							"sessionValue": "testname",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participantTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "05dc05ce-86a9-4925-a9a0-29b300c55c9a",
			"name": "create participantTag red",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b849399d-2029-4a81-af3d-47cf2c947853",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantTagIdRed\",jsonData.participantTagId)",
							"    ",
							"})",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantTagName",
							"value": "Troop Red",
							"sessionValue": "testname",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participantTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "94933cd2-356e-4ec4-91b2-612da4c36729",
			"name": "create observationTag Swimming",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb0309ef-600d-4e17-b544-575b1c2308d1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationTagIdSwimming\",jsonData.observationTagId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagName",
							"value": "Swimming in Gold",
							"sessionValue": "testname",
							"type": "text"
						},
						{
							"key": "parentObservationTagId",
							"value": "1",
							"sessionValue": "1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "7267ecf5-1949-47c6-accc-4575ccc7a52f",
			"name": "create observationTag running",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0d63cef-07b6-4120-96dd-26aa2fe36619",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationTagIdrunning\",jsonData.observationTagId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagName",
							"value": "Race up the hill",
							"sessionValue": "testname",
							"type": "text"
						},
						{
							"key": "parentObservationTagId",
							"value": "1",
							"sessionValue": "1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "92f42fbe-51ca-4c1f-baa4-0f5e45d83a0b",
			"name": "create observation Tick",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5da3558-0cd8-4b58-a9ed-55170a937872",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId2 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationIdTick\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "Er watschelt nur und schnüt",
							"sessionValue": "test",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderIdDonald}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantIdTick}}",
							"sessionValue": "participantId1}}",
							"type": "text"
						},
						{
							"key": "activityId",
							"value": "{{activityIdRunning}}",
							"sessionValue": "{{activityIdRunning}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "a116844a-9946-41e9-93d4-f119b9f7fbc7",
			"name": "create observation Trick",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68940979-d851-40d4-b616-8a96471c68f7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId2 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationIdTrick\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "Schwimmt nicht in GOLD",
							"sessionValue": "test",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderIdDagobert}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantIdTrick}}",
							"sessionValue": "participantId1}}",
							"type": "text"
						},
						{
							"key": "activityId",
							"value": "{{activityIdSwimming}}",
							"sessionValue": "{{activityIdRunning}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "08216b5c-1d46-4586-ada3-bef3ff87e4c5",
			"name": "create observation Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92e6fc57-1600-45e0-87ed-d049ca20b9fe",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId2 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationIdTrack\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "Toll wie der watschelt",
							"sessionValue": "test",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderIdDonald}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantIdTick}}",
							"sessionValue": "participantId1}}",
							"type": "text"
						},
						{
							"key": "activityId",
							"value": "{{activityIdHiking}}",
							"sessionValue": "{{activityIdRunning}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "08d500fc-2931-4af8-888d-b7b4ce9b2fe6",
			"name": "create observation Babysmurf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92e6fc57-1600-45e0-87ed-d049ca20b9fe",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId2 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationIdTrack\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "schlumpft noch nicht",
							"sessionValue": "test",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderIdPapaSchlumpf}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantIdBabysmurf}}",
							"sessionValue": "participantId1}}",
							"type": "text"
						},
						{
							"key": "activityId",
							"value": "{{activityIdSchlumpfen}}",
							"sessionValue": "{{activityIdRunning}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "6b9df6db-fb83-4f3a-9d7f-822b825d8f8e",
			"name": "add observationTag to observation Tick",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28f2b715-12d8-4605-b867-01445328d892",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test observation",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagId",
							"value": "{{observationTagIdRunning}}",
							"sessionValue": "{{observationTagId2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationIdTick}}/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationIdTick}}",
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "c2a0c01d-7dc0-4d73-991c-affb40401353",
			"name": "create codeMapping 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3426fe5b-7633-456a-bda8-3a0518d153b0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set codeMappingId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"codeMappingId1\",jsonData.codeMappingId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"sessionValue": "testmyc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"sessionValue": "0",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"sessionValue": "testpwd",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"sessionValue": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"sessionValue": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"sessionValue": "{{leaderId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"sessionValue": "participantId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "codeMappingName",
							"value": "testmapping",
							"sessionValue": "testmapping",
							"type": "text"
						},
						{
							"key": "Key1_alpha",
							"value": "keytest1",
							"sessionValue": "key",
							"type": "text"
						},
						{
							"key": "Value1",
							"value": "value",
							"sessionValue": "value",
							"type": "text"
						},
						{
							"key": "Key1_num",
							"value": "3",
							"sessionValue": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/codeMapping",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"codeMapping"
					]
				}
			},
			"response": []
		}
	]
}