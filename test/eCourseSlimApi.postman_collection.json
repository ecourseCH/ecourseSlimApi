{
	"info": {
		"_postman_id": "b408ecd0-bc51-45a5-bb7b-bfeeb4fcf64f",
		"name": "eCourseSlimApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "del user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name1",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test1@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6eca716-3cc1-4053-904f-2143984c86e2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userId1\",jsonData.userId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name1",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test1@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf431e5e-9ffe-41e0-8a6c-631874986ae6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userId2\",jsonData.userId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name2",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test2@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/user/{{userId2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/user/{{userId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf431e5e-9ffe-41e0-8a6c-631874986ae6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userId2\",jsonData.userId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name2_2",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test2_2@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH_2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user/{{userId2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1d30ac36-554f-47bd-8827-59ddd4c68c7b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"userId2\",jsonData.userId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/user/{{userId2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get course id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/courseId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courseId"
					]
				}
			},
			"response": []
		},
		{
			"name": "get courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/course",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"name": "add course 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "479048f4-f158-4e1c-80b8-663fae6273c4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"pm.test(\"set courseId1 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"courseId1\",jsonData.courseId)",
							"    ",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text"
						},
						{
							"key": "courseName",
							"value": "test course1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/course",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"name": "del course",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name1",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test1@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/course",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"course"
					]
				}
			},
			"response": []
		},
		{
			"name": "get test course",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/testcourse",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"testcourse"
					]
				}
			},
			"response": []
		},
		{
			"name": "create leader 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db03cc7d-ac06-4a64-923a-2c6d057e4af6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"name": "get leader 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/leader/{{leaderId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader",
						"{{leaderId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete leader 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader/{{leaderId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader",
						"{{leaderId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get leaders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"name": "create leader 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e60606c7-817c-49c5-a898-8c62babef00a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set leaderId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId2\",jsonData.leaderId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text"
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text"
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text"
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/leader",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"leader"
					]
				}
			},
			"response": []
		},
		{
			"name": "get activities",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"name": "create activity 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b76cbc0-fc98-4048-bdfc-d4d3dea70d0c",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set activityId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"activityId1\",jsonData.activityId)",
							"    ",
							"})",
							"",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text"
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text"
						},
						{
							"key": "activityDate",
							"value": "2018-01-01",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity"
					]
				}
			},
			"response": []
		},
		{
			"name": "get activity 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/activity/{{activityId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity",
						"{{activityId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get participants",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete activity 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/activity/{{activityId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"activity",
						"{{activityId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete participant1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant/{{participantId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant",
						"{{participantId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create participant 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "719db3b0-0cbf-433c-9661-d601b355d15b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantId2\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantName",
							"value": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af1df05a-76f0-421b-8d67-b3f6820a85f7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationId1\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe57d083-d9cd-4302-a5ea-c652b75dca75",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId2 variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationId2\",jsonData.observationId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test observation",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text"
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observations Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "Test user name1",
							"type": "text"
						},
						{
							"key": "userMail",
							"value": "test1@test.ch",
							"type": "text"
						},
						{
							"key": "password",
							"value": "testpwd",
							"type": "text"
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text"
						},
						{
							"key": "leaderId",
							"value": "2",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationfilter",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationfilter"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observation 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observationTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "create participant 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "775c0db0-1206-4a45-b674-325da7ffc4f8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set participantId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantId1\",jsonData.participantId)",
							"    ",
							"})",
							"/*",
							"pm.test(\"activity id below 10\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantName",
							"value": "est",
							"type": "text"
						},
						{
							"key": "participantSurname",
							"value": "sdf",
							"type": "text"
						},
						{
							"key": "participantScoutname",
							"value": "sdf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participant",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observationTag 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2355a51d-21af-4112-8f54-632d49f2152c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationTagId2\",jsonData.observationTagId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagName",
							"value": "test observation tag",
							"type": "text"
						},
						{
							"key": "parentObservationTagId",
							"value": "1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observationTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2095a9b0-96af-4cc9-b0be-bb30eba100d8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"observationTagId1\",jsonData.observationTagId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagName",
							"value": "testname",
							"type": "text"
						},
						{
							"key": "parentObservationTagId",
							"value": "1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observationTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observationTag/{{observationTagId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag",
						"{{observationTagId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get participant1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/participant/{{participantId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participant",
						"{{participantId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observationTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTag/{{observationTagId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTag",
						"{{observationTagId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observationTags per observation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationId2}}/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationId2}}",
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "add observationTag to observation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28f2b715-12d8-4605-b867-01445328d892",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test observation",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagId",
							"value": "{{observationTagId2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationId2}}/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationId2}}",
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observationTag from observation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagId",
							"value": "{{observationTagId2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observation/{{observationId2}}/observationTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observation",
						"{{observationId2}}",
						"observationTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observationTagTree",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/observationTagTree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTagTree"
					]
				}
			},
			"response": []
		},
		{
			"name": "set observationTagTree",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28f2b715-12d8-4605-b867-01445328d892",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test observation",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationTagId",
							"value": "{{observationTagId2}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/observationTagTree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"observationTagTree"
					]
				}
			},
			"response": []
		},
		{
			"name": "get participantTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/participantTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "create participantTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5bdd5ca-a285-4bbb-b3c4-3657d7653ca8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set observationId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"participantTagId1\",jsonData.participantTagId)",
							"    ",
							"})",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantTagName",
							"value": "testname",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participantTag",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag"
					]
				}
			},
			"response": []
		},
		{
			"name": "get participantTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/participantTag/{{participantTagId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag",
						"{{participantTagId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete participantTag 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/participantTag/{{participantTagId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"participantTag",
						"{{participantTagId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get codeMappings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/codeMapping",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"codeMapping"
					]
				}
			},
			"response": []
		},
		{
			"name": "create codeMapping 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3426fe5b-7633-456a-bda8-3a0518d153b0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"",
							"pm.test(\"set codeMappingId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"codeMappingId1\",jsonData.codeMappingId)",
							"    ",
							"})",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "activityName",
							"value": "Test activity name1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityNumber",
							"value": "12",
							"type": "text",
							"disabled": true
						},
						{
							"key": "activityDate",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "language",
							"value": "DE_CH",
							"type": "text",
							"disabled": true
						},
						{
							"key": "observationText",
							"value": "test",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderId",
							"value": "{{leaderId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "participantId",
							"value": "{{participantId2}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "codeMappingName",
							"value": "testmapping",
							"type": "text"
						},
						{
							"key": "Key1_alpha",
							"value": "keytest1",
							"type": "text"
						},
						{
							"key": "Value1",
							"value": "value",
							"type": "text"
						},
						{
							"key": "Key1_num",
							"value": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/codeMapping",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"codeMapping"
					]
				}
			},
			"response": []
		},
		{
			"name": "get codeMapping 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25efe386-9a5f-468c-84e2-70266a1cf97e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/codeMapping/{{codeMappingId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"codeMapping",
						"{{codeMappingId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete codeMapping 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b4b10c-c8f4-467f-86ba-22e94243a08f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// example using response assertions",
							"pm.test(\"response should be okay to process\", function () { ",
							"    pm.response.to.not.be.error; ",
							"    pm.response.to.have.jsonBody(\"\"); ",
							"    pm.response.to.not.have.jsonBody(\"error\"); ",
							"});",
							"",
							"/*",
							"pm.test(\"set userId variable\", function() {",
							"        var jsonData = pm.response.json();",
							"    pm.environment.set(\"leaderId1\",jsonData.leaderId)",
							"    ",
							"})",
							"",
							"pm.test(\"user id present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userId).to.be.below(10);",
							"});",
							"",
							"*/"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "courseName",
						"value": "testmyc",
						"disabled": true
					},
					{
						"key": "ownerUserId",
						"value": "0",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "{{userId1}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderName",
							"value": "test leaderName 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderSurname",
							"value": "test leaderSurname 1",
							"type": "text",
							"disabled": true
						},
						{
							"key": "leaderScoutname",
							"value": "test leaderScoutname 1",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/codeMapping/{{codeMappingId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"codeMapping",
						"{{codeMappingId1}}"
					]
				}
			},
			"response": []
		}
	]
}